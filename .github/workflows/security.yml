name: Security Testing

on:
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'tests/security/**'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'tests/security/**'
      - 'requirements*.txt'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of security test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - authentication
          - injection
          - rate_limiting
          - jwt
          - owasp_top10

jobs:
  comprehensive-security-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        security-test-type: ['authentication', 'injection', 'rate_limiting', 'jwt', 'owasp_top10']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest-html pytest-json-report
    
    - name: Run specific security tests
      env:
        REDIS_URL: redis://localhost:6379/15
        ZOHO_CLIENT_ID: test_client_id
        ZOHO_CLIENT_SECRET: test_client_secret
        ZOHO_REFRESH_TOKEN: test_refresh_token
        JWT_SECRET: security_test_jwt_secret_key_32_chars_long_for_testing
        PORTAL_ID: test_portal_id
        ENVIRONMENT: security_test
        ALLOWED_IPS: "127.0.0.1,::1,testclient,unknown,0.0.0.0/0"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        if [ "${{ github.event.inputs.test_type }}" = "all" ] || [ "${{ github.event.inputs.test_type }}" = "" ]; then
          pytest tests/security/test_${{ matrix.security-test-type }}.py -v --tb=short --maxfail=3 \
            --json-report --json-report-file=security-report-${{ matrix.security-test-type }}-py${{ matrix.python-version }}.json
        elif [ "${{ github.event.inputs.test_type }}" = "${{ matrix.security-test-type }}" ]; then
          pytest tests/security/test_${{ matrix.security-test-type }}.py -v --tb=short \
            --json-report --json-report-file=security-report-${{ matrix.security-test-type }}-py${{ matrix.python-version }}.json
        else
          echo "Skipping ${{ matrix.security-test-type }} tests"
          exit 0
        fi
    
    - name: Upload security test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-results-${{ matrix.security-test-type }}-py${{ matrix.python-version }}
        path: security-report-*.json

  dependency-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit bandit
    
    - name: Run safety check
      continue-on-error: true
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report || true
    
    - name: Run pip-audit
      continue-on-error: true
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=cyclonedx-json --output=pip-audit-cyclonedx.json || true
    
    - name: Run bandit security scan
      continue-on-error: true
      run: |
        bandit -r server/ -f json -o bandit-report.json || true
        bandit -r server/ -f txt || true
    
    - name: Upload dependency security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          pip-audit-cyclonedx.json
          bandit-report.json

  container-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t zoho-mcp-server:security-test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'zoho-mcp-server:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy JSON report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'zoho-mcp-server:security-test'
        format: 'json'
        output: 'trivy-results.json'
    
    - name: Upload container security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: container-security-report
        path: trivy-results.json

  security-report-summary:
    runs-on: ubuntu-latest
    needs: [comprehensive-security-tests, dependency-security-scan, container-security-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all security artifacts
      uses: actions/download-artifact@v3
      with:
        path: security-artifacts
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Generate security summary
      run: |
        python -c "
        import json
        import os
        from pathlib import Path
        
        print('# Security Test Summary')
        print()
        
        # Process security test results
        artifacts_dir = Path('security-artifacts')
        test_results = {}
        
        for artifact_dir in artifacts_dir.iterdir():
            if artifact_dir.is_dir() and 'security-results' in artifact_dir.name:
                for json_file in artifact_dir.glob('*.json'):
                    with open(json_file) as f:
                        data = json.load(f)
                        test_type = artifact_dir.name.split('-')[2]
                        if test_type not in test_results:
                            test_results[test_type] = []
                        test_results[test_type].append(data)
        
        # Summary of test results
        for test_type, results in test_results.items():
            print(f'## {test_type.title()} Security Tests')
            for result in results:
                summary = result.get('summary', {})
                total = summary.get('total', 0)
                passed = summary.get('passed', 0)
                failed = summary.get('failed', 0)
                print(f'- Total: {total}, Passed: {passed}, Failed: {failed}')
            print()
        
        # Check for critical failures
        critical_failures = []
        for test_type, results in test_results.items():
            for result in results:
                if result.get('summary', {}).get('failed', 0) > 0:
                    critical_failures.append(test_type)
        
        if critical_failures:
            print('⚠️  **Critical Security Issues Found**')
            print('The following security test categories have failures:')
            for failure in set(critical_failures):
                print(f'- {failure}')
            print()
            print('Please review the detailed test results and address security vulnerabilities.')
        else:
            print('✅ **All Security Tests Passed**')
        " > security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });